@page "/register"
@using HospitalAppointmentSystem.Client.Models
@inject AuthService AuthService
@inject NavigationManager NavigationManager

<PageTitle>Реєстрація - Система запису до лікаря</PageTitle>

<div class="register-container">
    <div class="register-card">
        <h2>Реєстрація</h2>

        @if (!string.IsNullOrEmpty(error))
        {
            <div class="alert alert-danger">
                <i class="fas fa-exclamation-circle"></i>
                @error
            </div>
        }

        <EditForm Model="@registerModel" OnValidSubmit="HandleRegistration">
            <DataAnnotationsValidator />

            <div class="form-group">
                <label for="role">Оберіть тип користувача:</label>
                <div class="role-selector">
                    <div class="role-option @(registerModel.Role == UserRole.Patient ? "selected" : "")"
                         @onclick="() => registerModel.Role = UserRole.Patient">
                        <i class="fas fa-user"></i>
                        <span>Пацієнт</span>
                        <small>Записуйтесь на прийом до лікаря</small>
                    </div>
                    <div class="role-option @(registerModel.Role == UserRole.Doctor ? "selected" : "")"
                         @onclick="() => registerModel.Role = UserRole.Doctor">
                        <i class="fas fa-user-md"></i>
                        <span>Лікар</span>
                        <small>Приймайте та керуйте записами пацієнтів</small>
                    </div>
                </div>
                <ValidationMessage For="@(() => registerModel.Role)" />
            </div>

            <div class="form-group">
                <label for="email">Email:</label>
                <InputText id="email" @bind-Value="registerModel.Email" class="form-control" />
                <ValidationMessage For="@(() => registerModel.Email)" />
            </div>

            <div class="form-group">
                <label for="firstName">Ім'я:</label>
                <InputText id="firstName" @bind-Value="registerModel.FirstName" class="form-control" />
                <ValidationMessage For="@(() => registerModel.FirstName)" />
            </div>

            <div class="form-group">
                <label for="lastName">Прізвище:</label>
                <InputText id="lastName" @bind-Value="registerModel.LastName" class="form-control" />
                <ValidationMessage For="@(() => registerModel.LastName)" />
            </div>

            @if (registerModel.Role == UserRole.Doctor)
            {
                <div class="form-group">
                    <label for="specialization">Спеціалізація:</label>
                    <InputText id="specialization" @bind-Value="registerModel.Specialization" class="form-control" />
                    <ValidationMessage For="@(() => registerModel.Specialization)" />
                </div>
            }

            <div class="form-group">
                <label for="password">Пароль:</label>
                <div class="password-input">
                    <InputText type="@(showPassword ? "text" : "password")" 
                              id="password" 
                              @bind-Value="registerModel.Password" 
                              class="form-control" />
                    <button type="button" class="btn-toggle-password" @onclick="TogglePasswordVisibility">
                        <i class="fas @(showPassword ? "fa-eye-slash" : "fa-eye")"></i>
                    </button>
                </div>
                <ValidationMessage For="@(() => registerModel.Password)" />
            </div>

            <div class="form-group">
                <label for="confirmPassword">Підтвердження пароля:</label>
                <div class="password-input">
                    <InputText type="@(showConfirmPassword ? "text" : "password")" 
                              id="confirmPassword" 
                              @bind-Value="registerModel.ConfirmPassword" 
                              class="form-control" />
                    <button type="button" class="btn-toggle-password" @onclick="ToggleConfirmPasswordVisibility">
                        <i class="fas @(showConfirmPassword ? "fa-eye-slash" : "fa-eye")"></i>
                    </button>
                </div>
                <ValidationMessage For="@(() => registerModel.ConfirmPassword)" />
            </div>

            <button type="submit" class="btn btn-primary w-100" disabled="@isRegistering">
                @if (isRegistering)
                {
                    <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                    <span>Реєстрація...</span>
                }
                else
                {
                    <span>Зареєструватися</span>
                }
            </button>
        </EditForm>

        <div class="mt-3 text-center">
            <a href="/login">Вже маєте обліковий запис? Увійти</a>
        </div>
    </div>
</div>

<style>
    /* Стилі залишаються ті самі */
</style>

@code {
    private RegisterModel registerModel = new() { Role = UserRole.Patient };  // За замовчуванням - пацієнт
    private bool isRegistering = false;
    private string? error;
    private bool showPassword = false;
    private bool showConfirmPassword = false;

    private void TogglePasswordVisibility()
    {
        showPassword = !showPassword;
    }

    private void ToggleConfirmPasswordVisibility()
    {
        showConfirmPassword = !showConfirmPassword;
    }

    private async Task HandleRegistration()
    {
        try
        {
            isRegistering = true;
            error = null;

            var result = await AuthService.Register(registerModel);
            if (result.Successful)
            {
                NavigationManager.NavigateTo("/login");
            }
            else
            {
                error = result.Error;
            }
        }
        catch (Exception ex)
        {
            error = "Сталася помилка при реєстрації. Спробуйте пізніше.";
            Console.WriteLine(ex);
        }
        finally
        {
            isRegistering = false;
        }
    }
}